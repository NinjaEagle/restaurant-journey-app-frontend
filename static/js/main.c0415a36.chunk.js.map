{"version":3,"sources":["components/fordham-road.jpg","components/queens.jpg","components/manhattan.jpg","components/brooklyn.jpg","components/statenisland.jpeg","container/LoginPage.js","container/Home.js","container/NavBar.js","components/Bronx.js","components/Queens.js","components/Manhattan.js","components/Brooklyn.js","components/Staten_Island.js","components/Last.js","components/Scoreboard.js","components/Profile.js","components/Delete.js","components/Codes.js","components/Restaurant.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoginPage","state","username","password","handleLogin","event","setState","target","name","value","handleSubmit","e","console","log","preventDefault","fetch","method","headers","body","JSON","stringify","then","res","json","data","token","localStorage","props","history","push","anime","targets","opacity","delay","easing","duration","type","this","onChange","onClick","Component","Home","className","to","NavBar","link","width","padding","margin","background","textDecoration","color","style","Bronx","cuisineChosen","cuisineName","restaurants","cuisineList","score","getCuisines","bronxrest","filter","restaurant","borough","cuisines","map","rest","cuisine","uniqueCuisines","Set","handleSelectCuisine","renderRestaurants","response","sortedCuisines","sort","id","role","aria-label","src","FordhamRoad","alt","Queens","queensrest","queens","Manhattan","manhattanrest","manhattan","Brooklyn","brooklynrest","brooklyn","Staten_Island","statenrest","statenisland","Last","favoriteFood","userAdded","Math","floor","random","users","handleChange","usersList","favorite_food","addUser","showOutcome","Score","renderUsers","a","b","user","Profile","aria-hidden","Delete","userNotFound","deleted","handleUsername","deleteUser","length","makeFetch","sendUser","noUser","Codes","renderCodes","code","unique","index","self","indexOf","renderOutcomes","violation","Restaurant","showData","findNextBorough","urlArray","document","URL","split","parseInt","App","component","exact","path","Scoreboard","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0415a36.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fordham-road.b286e9f7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/queens.441423d1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/manhattan.eb976ba6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/brooklyn.fcf27836.jpg\";","module.exports = __webpack_public_path__ + \"static/media/statenisland.067766d4.jpeg\";","import React, { Component } from 'react'; \nimport anime from \"animejs/lib/anime.es.js\";\nclass LoginPage extends Component {\n\n    state ={\n        username: '',\n        password: ''\n    }\n    \n    handleLogin = (event) => {\n       this.setState({\n           [event.target.name]:event.target.value\n       })\n    }\n    componentDidMount() {\n        anime({\n          targets: \".title,\",\n          opacity: [0, 100],\n          delay: 500,\n          easing: \"easeInOutExpo\",\n          duration: 3000\n        });\n    }\n\n    handleSubmit = (e) => {\n      console.log(\"I'm submitting\")\n        e.preventDefault();\n        // fetch(\"http://localhost:3000/login\",{\n        fetch(\"https://restaurant-journey-backend.herokuapp.com/login\",{\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accepts\": \"application/json\"\n            },\n            body: JSON.stringify(this.state)\n        })\n        .then(res => res.json())\n        .then(data =>{ console.log(data)\n        if (data.token)  {\n          localStorage.token = data.token\n          this.props.history.push('./profile')\n        }})\n        }\n    \n\n    render() {\n        // console.log(this.state.username)\n        return (\n          <div>\n      \n            <form>\n              <br />\n              Username:\n              <input\n                name=\"username\"\n                type=\"text\"\n                value={this.state.username}\n                onChange={this.handleLogin}\n              />\n              <br />\n              Password:\n              <input\n                name=\"password\"\n                type=\"text\"\n                value={this.state.password}\n                onChange={this.handleLogin}\n              />\n              <br />\n              <button\n                onClick={this.handleSubmit}\n                name=\"submit\"\n                type=\"submit\"\n              >\n                Log In\n              </button>\n            </form>\n          </div>\n        );\n    }\n}\n\nexport default LoginPage;","import React, {Component} from \"react\"\nimport { NavLink } from 'react-router-dom';\n\n\nexport default class Home extends Component {\n\n    render() {\n        return (\n            <div className=\"home\">\n                <div className=\"welcome\">\n                Welcome to Restaurant Journey!\n                <div className=\"footer\">\n                    Try not to get sick!\n                </div>\n                </div>\n                <br></br>\n                Your goal is to make it through all five boroughs without depleting your health.\n                <br></br>\n                <br></br>\n                Choose each restaurant wisely!\n                <br></br>\n                <br></br>\n                <br></br>\n                <NavLink to=\"/bronx\" className=\"start-button\"> Start </NavLink>\n            </div>\n        )\n    }\n\n\n\n}","import React, {Component} from \"react\"\nimport { NavLink } from 'react-router-dom';\n\n\nexport default class NavBar extends Component {\n\n    render() {\n\n        const link = {\n            width: '100px',\n            padding: '12px',\n            margin: '6px 6px 6px',\n            background: 'teal',\n            textDecoration: 'none',\n            color: 'white',\n          }\n\n        return (\n            <div className=\"navbar\">\n                <div className=\"buttons\">\n                        \n                    <span className=\"title\">Restaurant Journey</span>\n                        <NavLink to=\"/\" style={link}>Home</NavLink>\n                \n                        <NavLink to=\"/leaderboard\" style={link}>Leaderboard</NavLink>\n                    \n                        <NavLink to=\"/profile\" style={link}>Players</NavLink>\n                 </div>\n            </div>\n        \n        );\n    }\n}","import React, {Component} from \"react\"\nimport FordhamRoad from \"./fordham-road.jpg\"\nimport { NavLink } from 'react-router-dom';\n\nexport default class Bronx extends Component {\n\n    state = {\n        cuisineChosen: false,\n        cuisineName: \"\",\n        restaurants: [],\n        cuisineList: [],\n        score: 0\n    }\n\n    componentDidMount() {\n        // fetch(\"http://localhost:3000/restaurants\")\n        fetch(\"https://restaurant-journey-backend.herokuapp.com/restaurants\")\n        .then(response => response.json())\n        .then(data => this.getCuisines(data))\n    }\n\n    getCuisines = (data) => {\n        let bronxrest = data.filter(restaurant => restaurant.borough === \"Bronx\")\n        console.log(bronxrest)\n        let cuisines = bronxrest.map(rest => {return rest.cuisine});\n        let uniqueCuisines = [...new Set(cuisines)]; \n        this.setState({\n            restaurants: bronxrest,\n            cuisineList: uniqueCuisines,\n            \n        })\n    }\n\n    handleSelectCuisine = (e) => {\n        \n        this.setState({\n            cuisineChosen: true,\n            cuisineName: e.target.value\n        })\n    }\n\n    renderRestaurants = () => {\n        return this.state.restaurants.filter(rest => rest.cuisine === this.state.cuisineName)\n    }\n\n    render() {\n       let sortedCuisines= this.state.cuisineList.sort();\n        console.log(this.state)\n        return (\n          <div className=\"bronx\">\n            {this.state.cuisineChosen ? (\n              <div className=\"center\">\n                <h2>Great Choice!</h2>\n                <h2>You chose {this.state.cuisineName} </h2>\n                <h2>Here are your options:</h2>\n                {this.renderRestaurants().map(restaurant => {\n                  return (\n                    <div className=\"restaurants\">\n                      <NavLink\n                        to={`/restaurant/${restaurant.id}`}\n                        className=\"navlink-restaurant\"\n                        id={restaurant.score}\n                      >\n          \n                        {restaurant.name}\n                      </NavLink>\n                    </div>\n                  );\n                })}\n                <h1>\n                  <span role=\"img\" aria-label=\"hehe\">😈</span>\n                </h1>\n              </div>\n            ) : (\n              <div>\n                <h2>\n                  Welcome to The Bronx!\n                  <br />This is the first stop on your restaurant\n                  journey.\n                </h2>\n                <img src={FordhamRoad} alt=\"fordham-road\" />\n                <br />\n                <h3>\n                  Home to many different cultures and cuisines, The\n                  Bronx has been a hub of variety for decades.\n                </h3>\n                <h3>What kind of food would you like to try?</h3>\n                <select\n                  onChange={this.handleSelectCuisine}\n                  className=\"options\"\n                >\n                  <option value=\"none\">Select an option</option>\n                  {sortedCuisines.map(cuisine => (\n                    <option value={cuisine}>{cuisine}</option>\n                  ))}\n                </select>\n              </div>\n            )}\n          </div>\n        );\n    }\n}","import React, {Component} from \"react\"\nimport { NavLink } from 'react-router-dom';\nimport queens from \"./queens.jpg\"\n\nexport default class Queens extends Component {\n\n    state = {\n        cuisineChosen: false,\n        cuisineName: \"\",\n        restaurants: [],\n        cuisineList: []\n    }\n\n    componentDidMount() {\n        // fetch(\"http://localhost:3000/restaurants\")\n        fetch('https://restaurant-journey-backend.herokuapp.com/restaurants')\n        .then(response => response.json())\n        .then(data => this.getCuisines(data))\n    }\n\n    getCuisines = (data) => {\n        let queensrest = data.filter(restaurant => restaurant.borough === \"Queens\")\n        let cuisines = queensrest.map(rest => {return rest.cuisine})\n        let uniqueCuisines = [...new Set(cuisines)];\n        \n        this.setState({\n            restaurants: queensrest,\n            cuisineList: uniqueCuisines\n        })\n\n    }\n\n    handleSelectCuisine = (e) => {\n        \n        this.setState({\n            cuisineChosen: true,\n            cuisineName: e.target.value\n        })\n    }\n\n    renderRestaurants = () => {\n        return this.state.restaurants.filter(rest => rest.cuisine === this.state.cuisineName)\n    }\n\n    \n\n    render() {\n        let sortedCuisines= this.state.cuisineList.sort();\n\n        return (\n            <div className=\"bronx\">\n              {this.state.cuisineChosen ?\n                     <div className=\"center\"> \n                        <h2>Great Choice!</h2>\n                       <h2>You chose {this.state.cuisineName}. </h2> \n                            <h2>Here are your options:</h2>\n                                {this.renderRestaurants().map(restaurant => {return <div className=\"restaurants\"><NavLink to={`/restaurant/${restaurant.id}`} className=\"navlink-restaurant\" id={restaurant.score}> {restaurant.name}</NavLink></div>})}\n                                <h1> <span role=\"img\" aria-label=\"hehe\">😈</span></h1>\n                     </div>\n                     : \n                <div> \n                     <h2>\n                        Welcome to Queens! \n                        <br></br>This is the second stop on your restaurant journey.\n                    </h2>\n                    <img src={queens} alt=\"queens\"></img>\n                    <br></br>\n                    <h3>\n                    The most diverse borough in NYC, Queens is home to so many different kinds of food!\n                    </h3>\n                    <h3>What kind of food would you like to try?</h3>\n                    <select onChange={this.handleSelectCuisine} className=\"options\">\n                    <option value=\"none\">Select an option</option> \n                    {sortedCuisines.map(cuisine => <option value={cuisine}>{cuisine}</option>)}\n                    </select>\n                </div>\n                     } \n                \n\n            </div>\n        )\n    }\n}","import React, {Component} from \"react\"\nimport { NavLink } from 'react-router-dom';\nimport manhattan from \"./manhattan.jpg\"\n\nexport default class Manhattan extends Component {\n\n    state = {\n        cuisineChosen: false,\n        cuisineName: \"\",\n        restaurants: [],\n        cuisineList: []\n    }\n\n    componentDidMount() {\n        // fetch(\"http://localhost:3000/restaurants\")\n        fetch(\"https://restaurant-journey-backend.herokuapp.com/restaurants\")\n        .then(response => response.json())\n        .then(data => this.getCuisines(data))\n    }\n\n    getCuisines = (data) => {\n        let manhattanrest = data.filter(restaurant => restaurant.borough === \"Manhattan\")\n        let cuisines = manhattanrest.map(rest => {return rest.cuisine})\n        let uniqueCuisines = [...new Set(cuisines)];      \n        this.setState({\n            restaurants: manhattanrest,\n            cuisineList: uniqueCuisines\n        })\n    }\n\n    handleSelectCuisine = (e) => {\n        \n        this.setState({\n            cuisineChosen: true,\n            cuisineName: e.target.value\n        })\n    }\n\n    renderRestaurants = () => {\n        return this.state.restaurants.filter(rest => rest.cuisine === this.state.cuisineName)\n    }\n\n\n    render() {\n        let sortedCuisines= this.state.cuisineList.sort();\n\n        return (\n            <div className=\"bronx\">\n              {this.state.cuisineChosen ?\n                     <div className=\"center\"> \n                        <h2>Great Choice!</h2>\n                       <h2>You chose {this.state.cuisineName}. </h2> \n                            <h2>Here are your options:</h2>\n                                {this.renderRestaurants().map(restaurant => {return <div className=\"restaurants\"><NavLink to={`/restaurant/${restaurant.id}`}  className=\"navlink-restaurant\" id={restaurant.score}> {restaurant.name}</NavLink></div>})}\n                                <h1> <span role=\"img\" aria-label=\"hehe\">😈</span></h1>\n                     </div>\n                     : \n                <div> \n                     <h2>\n                        Welcome to Manhattan! \n                        <br></br>This is the third stop on your restaurant journey.\n                    </h2>\n                    <img src={manhattan} alt=\"manhattan\"></img>\n                    <br></br>\n                    <h3>\n                    Iconic all over the world, who doesn't want to come to Manhattan?\n                    </h3>\n                    <h3>Choose a cuisine!</h3>\n                    <select onChange={this.handleSelectCuisine} className=\"options\">\n                    <option value=\"none\">Select an option</option> \n                    {sortedCuisines.map(cuisine => <option value={cuisine}>{cuisine}</option>)}\n                    </select>\n                </div>\n                     } \n                \n\n            </div>\n        )\n    }\n}","import React, {Component} from \"react\"\nimport { NavLink } from 'react-router-dom';\nimport brooklyn from \"./brooklyn.jpg\"\n\nexport default class Brooklyn extends Component {\n\n    state = {\n        cuisineChosen: false,\n        cuisineName: \"\",\n        restaurants: [],\n        cuisineList: []\n    }\n\n    componentDidMount() {\n        // fetch(\"http://localhost:3000/restaurants\")\n        fetch(\"https://restaurant-journey-backend.herokuapp.com/restaurants\")\n        .then(response => response.json())\n        .then(data => this.getCuisines(data))\n    }\n\n    getCuisines = (data) => {\n        let brooklynrest = data.filter(restaurant => restaurant.borough === \"Brooklyn\")\n       \n        let cuisines = brooklynrest.map(rest => {return rest.cuisine})\n        let uniqueCuisines = [...new Set(cuisines)];\n               \n        this.setState({\n            restaurants: brooklynrest,\n            cuisineList: uniqueCuisines\n        })\n    }\n\n    handleSelectCuisine = (e) => {\n        \n        this.setState({\n            cuisineChosen: true,\n            cuisineName: e.target.value\n        })\n    }\n\n    renderRestaurants = () => {\n        return this.state.restaurants.filter(rest => rest.cuisine === this.state.cuisineName)\n    }\n\n\n    render() {\n      let sortedCuisines= this.state.cuisineList.sort();\n\n        return (\n          <div className=\"bronx\">\n            {this.state.cuisineChosen ? (\n              <div className=\"center\">\n                <h2>Great Choice!</h2>\n                <h2>You chose {this.state.cuisineName}</h2>\n                <h2>Here are your options:</h2>\n                {this.renderRestaurants().map(restaurant => {\n                  return (\n                    <div className=\"restaurants\">\n                      <NavLink\n                        to={`/restaurant/${restaurant.id}`}\n                        className=\"navlink-restaurant\"\n                        id={restaurant.score}\n                      >\n                        {\" \"}\n                        {restaurant.name}\n                      </NavLink>\n                    </div>\n                  );\n                })}\n                <h1>\n                  {\" \"}\n                  <span role=\"img\" aria-label=\"hehe\">😈</span>\n                </h1>\n              </div>\n            ) : (\n              <div>\n                <h2>\n                  Welcome to Brooklyn!\n                  <br />This is the fourth stop on your restaurant\n                  journey.\n                </h2>\n                <img src={brooklyn} alt=\"manhattan\" />\n                <br />\n                <h3>\n                  Known for its rich history and beautiful architecture,\n                  Brooklyn is quickly becoming the new Manhattan.\n                </h3>\n                <h3>Choose a cuisine!</h3>\n                <select\n                  onChange={this.handleSelectCuisine}\n                  className=\"options\"\n                >\n                  <option value=\"none\">Select an option</option>\n                  {sortedCuisines.map(cuisine => (\n                    <option value={cuisine}>{cuisine}</option>\n                  ))}\n                </select>\n              </div>\n            )}\n          </div>\n        );\n    }\n}","import React, {Component} from \"react\"\nimport { NavLink } from 'react-router-dom';\nimport statenisland from \"./statenisland.jpeg\"\n\nexport default class Staten_Island extends Component {\n\n\n    state = {\n        cuisineChosen: false,\n        cuisineName: \"\",\n        restaurants: [],\n        cuisineList: []\n    }\n\n    componentDidMount() {\n        // fetch(\"http://localhost:3000/restaurants\")\n        fetch(\"https://restaurant-journey-backend.herokuapp.com/restaurants\")\n        .then(response => response.json())\n        .then(data => this.getCuisines(data))\n    }\n\n    getCuisines = (data) => {\n        let statenrest = data.filter(restaurant => restaurant.borough === \"Staten Island\")\n        let cuisines = statenrest.map(rest => {return rest.cuisine})\n        let uniqueCuisines = [...new Set(cuisines)];    \n\n        this.setState({\n            restaurants: statenrest,\n            cuisineList: uniqueCuisines\n        })\n    }\n\n    handleSelectCuisine = (e) => {\n    \n        this.setState({\n            cuisineChosen: true,\n            cuisineName: e.target.value\n        })\n    }\n\n    renderRestaurants = () => {\n        return this.state.restaurants.filter(rest => rest.cuisine === this.state.cuisineName)\n    }\n\n\n    render() {\n        let sortedCuisines= this.state.cuisineList.sort();\n\n        return (\n            <div className=\"bronx\">\n                 {this.state.cuisineChosen ?\n                     <div className=\"center\"> \n                        <h2>Great Choice!</h2>\n                       <h2>You chose {this.state.cuisineName}. </h2> \n                            <h2>Here are your options:</h2>\n                                {this.renderRestaurants().map(restaurant => {return <div className=\"restaurants\"><NavLink to={`/restaurant/${restaurant.id}`} className=\"navlink-restaurant\" id={restaurant.score}> {restaurant.name}</NavLink></div>})}\n                                <h1> <span role=\"img\" aria-label=\"hehe\">😈</span></h1>\n                     </div>\n                     : \n                    <div> \n                     <h2>\n                        Welcome to Staten Island! <h4>Did you forget it was a borough?</h4>\n                        This is the last stop on your restaurant journey!\n                    </h2>\n                    <img src={statenisland} alt=\"staten-island\"></img>\n                    <br></br>\n                    <h3>\n                    Staten Island is...a place.\n                    </h3>\n                    <h3>What kind of food would you like to try?</h3>\n                    <select onChange={this.handleSelectCuisine} className=\"options\">\n                    <option value=\"none\">Select an option</option> \n                    {sortedCuisines.map(cuisine => <option value={cuisine}>{cuisine}</option>)}\n                    </select>\n                </div>\n                     } \n                \n\n            </div>\n\n            \n        ) //return\n\n\n    } //render\n    // top level\n}","import React, {Component} from \"react\"\nimport {NavLink} from \"react-router-dom\"\n\nexport default class Last extends Component {\n    state = {\n        username: \"\",\n        favoriteFood: \"\",\n        userAdded: false,\n        score: Math.floor(Math.random() * 200) + 20,\n        users: []\n    }\n\n    handleChange = (e) => {\n    if (e.target.className === \"username\") {\n        this.setState({\n        username: e.target.value\n        });\n    } else {\n        this.setState({\n        favoriteFood: e.target.value\n        });\n    }\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        let usersList = this.state.users\n        // fetch(\"http://localhost:3000/users\", {\n        fetch(\"https://restaurant-journey-backend.herokuapp.com/users\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accepts\": \"application/json\"\n            },\n            body: JSON.stringify({\n                username: this.state.username,\n                favorite_food: this.state.favoriteFood,\n                score: this.state.score\n            })\n        }).then(response => response.json())\n        .then(data => \n            this.setState({userAdded: true,\n                users: [...usersList, data]\n            })\n        )\n    }\n\n    addUser = () => {\n        if (this.state.userAdded === true) {\n            return <div> <br></br> <h3>You've been added to the leaderboard!</h3> <NavLink to=\"/leaderboard\" className=\"next-borough\">Click to see the leaderboard</NavLink> </div>\n        } else {\n            return null \n        }\n    }\n\n    showOutcome = () => {\n        if (this.state.score >= 80) {\n           return <div>\n                <h1>Sorry, but you have passed away. 😔</h1>\n                <h3>Enter a username to be immortalized on our leaderboard.</h3>\n                </div>\n        } else if (this.state.score <= 79 && this.state.score >= 50) {\n            return <div>\n                <h1>Wow, you almost didn't make it! 😳</h1>\n                <h3>You don't look well, but enter a username so we can all remember this miracle.</h3>\n                </div>\n        } else if (this.state.score > 0 && this.state.score <= 49) {\n            return <div> <h1>You made it just fine! 😜 Have you played this game before?</h1>\n                    <h3>Enter a username to be added to the leaderboard:</h3>\n                    </div>\n        }\n        \n    }\n\n    render() {\n        console.log(this.state)\n        return (\n            <div className=\"bronx\">\n            <br></br>\n            {this.showOutcome()}\n            <form onChange={this.handleChange}>\n                <input\n                value={this.state.username}\n                className=\"username\"\n                type=\"text\"\n                ></input>\n                <h3>What's your favorite food?</h3>\n                <input\n                value={this.state.favoriteFood}\n                className=\"favorite_food\"\n                type=\"text\"\n                ></input>\n                <br></br>\n                <br></br>\n                <button\n                onClick={this.handleSubmit}\n                className=\"next-borough\"\n                >\n\n                Submit\n                </button>\n            </form>\n            {this.addUser()}\n        </div>\n    );\n    }\n}\n","import React, { Component } from 'react';\nimport {NavLink} from \"react-router-dom\"\n\nclass Score extends Component {\n    state = {\n        users:[],\n    }\n    componentDidMount(){\n        // fetch(\"http://localhost:3000/users\")\n        fetch(\"https://restaurant-journey-backend.herokuapp.com/users\")\n        .then(res => res.json())\n        .then(data => this.setState({\n            users: data\n        }))\n    }\n\n    renderUsers = () =>{\n        let sorted = this.state.users.sort((a,b) => (a[\"score\"] > b[\"score\"])? 1:-1)\n        return sorted.map(user => {\n\n          const score = () => {\n            if (user.score >= 80) {\n              return user.score + \" (DECEASED)\"\n            }\n            else {\n              return user.score\n            }\n          }\n          \n        return (\n          <div className=\"userdiv\">\n            <span className=\"user\">\n              {user.username}: {score()}\n            </span>\n          </div>\n        );});\n    }\n\n\n    render() {\n        return (\n          <div className=\"leaderboard\">\n            <h1>Leaderboard</h1>\n            <h2>Healthiest Players:</h2>\n            {this.renderUsers()}\n          \n          <h3>Ashamed of your score? Want it removed from the leaderboard? <br></br>\n          Click the button below to send a request.</h3>\n          <NavLink to=\"/delete\" className=\"next-borough\">Delete Me From Leaderboard</NavLink>\n          </div>\n        );\n    }\n}\n\nexport default Score;","import React, { Component } from 'react'\n\nexport default class Profile extends Component {\n    state = {\n        users: [],\n        username: '',\n    };\n\n    componentDidMount() {\n        // fetch(\"http://localhost:3000/users\")\n        fetch(\"https://restaurant-journey-backend.herokuapp.com/users\")\n            .then(res => res.json())\n            .then(data => this.setState({ users: data}))\n    }\n\n    renderUsers = () => {\n      let sorted = this.state.users.sort((a, b) =>\n        a[\"score\"] < b[\"score\"] ? 1 : -1\n      );\n        return sorted.map(user => {\n          // console.log(user)\n          return(\n          <div className=\"usercard\">\n            <div className=\"ui card\">\n              <div className=\"content\">\n                <div className=\"header\">{user.username}</div>\n                <div className=\"meta\">\n                  <span className=\"date\">Joined in 2020</span>\n                </div>\n                <div className=\"description\">\n                  {user.username}'s favorite food is {user.favorite_food}\n                </div>\n              </div>\n              <div className=\"extra content\">\n                <a>\n                  <i aria-hidden=\"true\" className=\"user-icon\" />\n                    Score: {user.score}\n                </a>\n              </div>\n            </div>\n          </div>)\n          });\n        }\n \n    render() {\n    return (\n      <div className=\"profile-cards\">\n        {\n            this.renderUsers()\n        } \n      </div>\n    );}\n}","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nexport default class Delete extends Component {\n  state = {\n    username: \"\",\n    users: [],\n    userNotFound: false,\n    deleted: false\n  };\n\n  componentDidMount() {\n    // fetch(\"http://localhost:3000/users\")\n    fetch(\"https://restaurant-journey-backend.herokuapp.com/users\")\n      .then(response => response.json())\n      .then(data => this.setState({ users: data }));\n  }\n\n  handleUsername = e => {\n    this.setState({\n      username: e.target.value\n    });\n  };\n\n  deleted = () => {\n    if (this.state.deleted === true) {\n      return (\n        <div>\n          <h2>You have been deleted from the Leaderboard.</h2>\n          <NavLink to=\"/leaderboard\" className=\"next-borough\">\n            Return To Leaderboard\n          </NavLink>\n        </div>\n      );\n    }\n  };\n\n  deleteUser = e => {\n    e.preventDefault();\n\n    let user = this.state.users.filter(\n      user => user[\"username\"] === this.state.username\n    );\n\n    if (user.length === 0) {\n      this.setState({ userNotFound: true });\n    } else {\n      const sendUser = user => {\n        this.makeFetch(user);\n      };\n\n      sendUser(user);\n    }\n  };\n\n  makeFetch = (user) => {\n    this.setState({ deleted: true });\n\n    // fetch(`http://localhost:3000/users/${user[0].id}`, {\n      fetch(\"https://restaurant-journey-backend.herokuapp.com/users/${user[0].id}\",{\n      method: \"DELETE\",\n      body: JSON.stringify({ user })\n    })\n      .then(response => response.json())\n      .then(this.deleted);\n  };\n\n  noUser = () => {\n    if (this.state.userNotFound === true) {\n      return <h2>Sorry, no users with that username were found.</h2>;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"bronx\">\n        <br></br>\n        <h1>Delete Me From The Leaderboard!</h1>\n        <br></br>\n        <form>\n          <h3>Sorry to see you go, better luck next time!</h3>\n          <h3>Enter Username:</h3>\n          <input\n            onChange={this.handleUsername}\n            className=\"username\"\n            value={this.state.username}\n            type=\"text\"\n          ></input>\n          <h3></h3>\n          <button onClick={this.deleteUser} className=\"next-borough\">\n            Delete Me\n          </button>\n          {this.noUser()}\n        </form>\n        {this.deleted()}\n      </div>\n    );\n  }\n}\n","import React, {Component} from \"react\"\n\nexport default class Codes extends Component {\n\n    componentDidMount() {\n        // fetch(\"http://localhost:3000/restaurants\")\n        fetch(\"https://restaurant-journey-backend.herokuapp.com/restaurants\")\n        .then(response => response.json())\n        .then(this.renderCodes)\n    }\n\n    renderCodes = (data) => {\n        let codes = data.map(data => {return data.code})\n\n\n        codes.unique = function() {\n            return this.filter(function (value, index, self) { \n              return self.indexOf(value) === index;\n            });\n          }\n\n    }\n\n    renderOutcomes = () => {\n        if (this.props.restaurant.code === \"04M\") {\n            return <div className=\"outcome\"> You seem okay...hopefully the roach you saw crawling on the wall didn't get in your food.</div>\n        } else if (this.props.restaurant.code === \"04N\") {\n            return <div className=\"outcome\"> By the time you were done eating you stopped noticing all the buzzing around your ears.</div>\n        }\n        else if (this.props.restaurant.code === \"04L\" || this.props.restaurant.code === \"04K\") {\n            return <div className=\"outcome\"> Did you just see something move out of the corner of your eye? Nah, probably not. I'm sure you'll be fine.</div>\n        }\n        else if (this.props.restaurant.score > 0 && this.props.restaurant.score < 10) {\n            return <div className=\"outcome\">You did well! Congratulations, you didn't get sick.</div>\n        } else if (this.props.restaurant.score > 10 && this.props.restaurant.score < 28) {\n            return <div className=\"outcome\"> Hmm. You seem fine. Might be too early to tell though... </div>\n        } else if (this.props.restaurant.score > 27) {\n            return <div className=\"outcome\"> BIG yikes. You couldn't have chosen a worse place to eat. Enjoy the rest of your life. </div>\n        } else if (this.props.restaurant.score === null) {\n            return <div className=\"outcome\">You did well! Congratulations, you didn't get sick.</div>\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"outcome-div\">\n                   <h3>\n                   {this.renderOutcomes()}\n                    </h3> \n                    <h3> Violation: <br></br>{this.props.restaurant.violation}</h3>\n                    <h2>Sickness Score: {this.props.restaurant.score} </h2>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Codes from \"./Codes\"\nimport { NavLink } from 'react-router-dom';\n\nclass Restaurant extends Component {\n\n    state={\n        restaurant: {},\n        borough: \"\",\n        score: 0\n    }\n\n    componentDidMount() {\n        let urlArray = document.URL.split(\"/\")\n        let id = parseInt(urlArray[urlArray.length - 1])\n\n        // fetch(`http://localhost:3000/restaurants/${id}`)\n        fetch(`https://restaurant-journey-backend.herokuapp.com/restaurants/${id}`)\n        .then(response => response.json())\n        .then(data => this.showData(data))\n    }\n\n    showData = (data) => {\n        console.log(data)\n        // const newScore = this.state.score + data.score \n\n        if (data.borough === \"Bronx\") {\n            this.setState({\n                restaurant: data,\n                borough: data.borough, \n                score: data.score\n            })\n        } else {\n            this.setState({\n                restaurant: data,\n                borough: data.borough, \n                score: data.score\n            })\n        }\n    }\n\n    findNextBorough = () => {\n        if (this.state.borough === \"Bronx\") {\n            return <NavLink to=\"/queens\" score={this.state.restaurant.score} className=\"next-borough\"> Next Borough </NavLink>\n        }  else if (this.state.borough === \"Queens\") {\n           return <NavLink to=\"/manhattan\" score={this.state.restaurant.score} className=\"next-borough\"> Next Borough </NavLink>\n         } else if (this.state.borough === \"Manhattan\") {\n            return <NavLink to=\"/brooklyn\" score={this.state.restaurant.score} className=\"next-borough\"> Next Borough </NavLink>\n        } else if (this.state.borough === \"Brooklyn\") {\n            return <NavLink to=\"/statenisland\" score={this.state.restaurant.score} className=\"next-borough\"> Next Borough </NavLink>\n        } else {\n            return <NavLink to=\"/last\" className=\"next-borough\">Next</NavLink>\n        }\n    }\n\n    render() {\n        console.log(this.props.id)\n        return (\n            <div className=\"restaurant\">\n                <div className=\"restaurant-page\"><h1>\n                    Welcome to {this.state.restaurant.name}!\n                </h1> </div>\n                    <br></br>\n                   <h2>Here's how you did:</h2> \n                    <Codes restaurant={this.state.restaurant}/>\n\n                    <div>\n                        {/* <h2>\n                            Total Score: {this.state.score}\n                        </h2> */}\n                    {this.findNextBorough()}\n                    </div>\n            </div>\n        );\n    }\n}\n\nexport default Restaurant;","import React from 'react';\nimport './App.css';\nimport LoginPage from  './container/LoginPage';\nimport Home from \"./container/Home\"\nimport NavBar from \"./container/NavBar\";\nimport Bronx from \"./components/Bronx\"\nimport Queens from \"./components/Queens\"\nimport Manhattan from \"./components/Manhattan\"\nimport Brooklyn from \"./components/Brooklyn\"\nimport Staten_Island from \"./components/Staten_Island\"\nimport Last from \"./components/Last\"\nimport Scoreboard from \"./components/Scoreboard\"\nimport Profile from \"./components/Profile\"\nimport Delete from \"./components/Delete\"\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Restaurant from './components/Restaurant';\n\n\nfunction App () {\n \n      return (\n        <Router>\n          <div className=\"App\">\n           <header className=\"App-header\">\n                <NavBar component={NavBar}/>\n                <Route exact path=\"/\" component={Home}></Route>\n                <Route path=\"/bronx\" component={Bronx}></Route>\n                <Route path=\"/profile\" component={Profile}></Route>\n                <Route path=\"/leaderboard\" component={Scoreboard}></Route>\n                <Route path=\"/login\" component={LoginPage}></Route>\n                <Route path=\"/restaurant/:id\" component={Restaurant}></Route>\n                <Route path=\"/queens\" component={Queens}></Route>\n                <Route path=\"/manhattan\" component={Manhattan}></Route>\n                <Route path=\"/brooklyn\" component={Brooklyn}></Route>\n                <Route path=\"/statenisland\" component={Staten_Island}></Route>\n                <Route path=\"/last\" component={Last}></Route>\n                <Route path=\"/delete\" component={Delete}></Route>\n          </header>\n        </div>\n        </Router>\n      );\n  \n}\nexport default App;\n  \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}